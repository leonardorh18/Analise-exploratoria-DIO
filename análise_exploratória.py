# -*- coding: utf-8 -*-
"""Análise exploratória

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1isLY7yLt8wcdKXFGaO7An4B33hF4hC3R
"""

import pandas as pd
from google.colab import drive
drive.mount('/content/drive')
import math

import matplotlib.pyplot as plt
import numpy as np

recife = pd.read_excel('/content/drive/My Drive/DIO/Recife.xlsx')
salvador = pd.read_excel('/content/drive/My Drive/DIO/Salvador.xlsx')
natal = pd.read_excel('/content/drive/My Drive/DIO/Natal.xlsx')
fortaleza = pd.read_excel('/content/drive/My Drive/DIO/Fortaleza.xlsx')
aracaju = pd.read_excel('/content/drive/My Drive/DIO/Aracaju.xlsx')

datasets = pd.concat([recife, salvador, natal, fortaleza, aracaju])

datasets.isna().sum()

"""## cidades x vendas"""

cidade_vendas = datasets.groupby(['Cidade'])['Vendas'].sum()

cidades_vendas_idx = cidade_vendas.index

sum_values = cidade_vendas.sum()

sizes = []
for cvi in cidades_vendas_idx:
  sizes.append(cidade_vendas[cvi]/sum_values)

fig, ax1 = plt.subplots(figsize = (10,10)) 
ax1.set_title("Vendas por região")
ax1.pie(sizes, labels= cidades_vendas_idx, autopct = '%1.1f%%', startangle=90)
plt.show()

"""## loja x vendas"""

loja_vendas = datasets.groupby(['LojaID'])['Vendas'].sum()

loja_vendas.sort_values(ascending= False, inplace=True)
loja_vendas_idx = loja_vendas.index

loja_vendas

x = ['LOJA '+str(a) for a in loja_vendas_idx] 

y = [a for a in loja_vendas]

plt.figure(figsize= (10,10))
plt.bar(x[0:10], y[0:10], color = 'blue')
plt.ylabel("VENDAS")
plt.xlabel("LOJA")

"""## vendas geral meses 2019

"""

import datetime

datas = datasets['Data']

for x in datas:
  print(x.strftime("%m"))

ano = [x.strftime("%Y") for x in datas]
meses = [x.strftime("%m") for x in datas]
dias = [x.strftime("%d") for x in datas]

datasets["dia"], datasets["ano"], datasets["mes"] = dias, ano, meses

meses_vendas2019 = datasets[datasets['ano'] == '2019'].groupby(['mes'])['Vendas'].sum()

meses_vendas2019.sort_values(ascending= False, inplace = True)

meses_vendas2019idx = meses_vendas2019.index

meses_label = ['Mes ' +str(x) for x in meses_vendas2019idx]

fig, ax1 = plt.subplots(figsize = (10,10)) 
ax1.set_title("Vendas por mes do ano 2019")
ax1.pie(meses_vendas2019, labels= meses_label, autopct = '%1.1f%%', startangle=90)
plt.show()

"""# vendas geral meses 2018"""

meses_vendas2018 = datasets[datasets['ano'] == '2018'].groupby(['mes'])['Vendas'].sum()
meses_vendas2018.sort_values(ascending= False, inplace = True)
meses_vendas2018idx = meses_vendas2018.index
meses_label = ['Mes ' +str(x) for x in meses_vendas2018idx]

fig, ax1 = plt.subplots(figsize = (10,10)) 
ax1.set_title("Vendas por mes do ano 2019")
ax1.pie(meses_vendas2018, labels= meses_label, autopct = '%1.1f%%', startangle=30)
plt.show()

"""# vendas por região

para mudar o ano é só mudar o valor da variavel "ano"
"""

ano = '2019'
for cidade in ['Salvador', 'Natal', 'Fortaleza', 'Recife', 'Aracaju']:
  meses_vendas = datasets[((datasets['ano'] == ano) & (datasets['Cidade'] == cidade ))].groupby(['mes'])['Vendas'].sum()
  if meses_vendas.shape[0] > 1:
    meses_vendas.sort_values(ascending= False, inplace = True)
    meses_vendasidx = meses_vendas.index
    meses_label = ['Mes ' +str(x) for x in meses_vendasidx]
    fig, ax1 = plt.subplots(figsize = (10,10)) 
    ax1.set_title("Vendas de {} por mes do ano {}".format(cidade, ano))
    ax1.pie(meses_vendas, labels= meses_label, autopct = '%1.1f%%', startangle=30)
    plt.show()
# talvez por as regiões serem cidades turisticas, no começo do ano tende a ter mais vendas devido ao perido de ferias (sugestão)

ano = '2019'
for cidade in ['Salvador', 'Natal', 'Fortaleza', 'Recife', 'Aracaju']:
  loja_vendas = datasets[((datasets['ano'] == ano) & (datasets['Cidade'] == cidade ))].groupby(['LojaID'])['Vendas'].sum()
  if meses_vendas.shape[0] > 1:
    loja_vendas.sort_values(ascending= False, inplace = True)
    loja_vendasidx = loja_vendas.index
    loja_vendas_label = ['Loja ' +str(x) for x in loja_vendasidx]
    fig, ax1 = plt.subplots(figsize = (10,10)) 
    ax1.set_title("Vendas de {} por Lojas do ano {}".format(cidade, ano))
    ax1.pie(loja_vendas, labels= loja_vendas_label, autopct = '%1.1f%%', startangle=30)
    plt.show()

"""##adventure works"""

adv = pd.read_excel('/content/drive/My Drive/DIO/AdventureWorks.xlsx')

adv.isna().sum()

adv.Fabricante.value_counts()

adv

fab_qtd = adv.groupby(['Fabricante'])['Quantidade'].sum()
fab_qtd.sort_values(ascending= False, inplace = True)
fab_qtdidx = fab_qtd.index
fab_qtdLabel = [str(x) for x in fab_qtdidx]
fig, ax1 = plt.subplots(figsize = (10,10)) 
ax1.set_title("Quantidade de produtos vendidos por Fabricante".format(cidade, ano))
ax1.pie(fab_qtd, labels=fab_qtdLabel, autopct = '%1.1f%%', startangle=30)
plt.show()

fab_qtd = adv.groupby(['ID Produto'])['Quantidade'].sum()
fab_qtd.sort_values(ascending= False, inplace = True)
fab_qtdidx = fab_qtd.index
fab_qtdLabel = [str(x) for x in fab_qtdidx]
fig, ax1 = plt.subplots(figsize = (10,10)) 
ax1.set_title("Produtos mais vendidos ".format(cidade, ano))
ax1.pie(fab_qtd, labels=fab_qtdLabel, autopct = '%1.1f%%', startangle=30)
plt.show()

fab_qtd = adv.groupby(['ID Loja'])['Quantidade'].sum()
fab_qtd.sort_values(ascending= False, inplace = True)
fab_qtdidx = fab_qtd.index
fab_qtdLabel = [str(x) for x in fab_qtdidx]
fig, ax1 = plt.subplots(figsize = (10,10)) 
ax1.set_title("Lojas vs. quantidade de produtos vendidos".format(cidade, ano))
ax1.pie(fab_qtd, labels=fab_qtdLabel, autopct = '%1.1f%%', startangle=30)
plt.show()

adv['Lucro Unitario'] = adv['Preço Unitário'] - adv['Custo Unitário']

adv['Lucro Venda'] = adv['Lucro Unitario'] * adv['Quantidade']

adv['Dias Envio'] = adv['Data Envio'] - adv['Data Venda']

adv

fab_qtd = adv.groupby(['ID Loja'])['Lucro Venda'].sum()
fab_qtd.sort_values(ascending= False, inplace = True)
fab_qtdidx = fab_qtd.index
fab_qtdLabel = [str(x) for x in fab_qtdidx]
fig, ax1 = plt.subplots(figsize = (10,10)) 
ax1.set_title("Lojas vs. % do Lucro por venda".format(cidade, ano))
ax1.pie(fab_qtd, labels=fab_qtdLabel, autopct = '%1.1f%%', startangle=30)
plt.show()

fab_qtd = adv.groupby(['ID Produto'])['Lucro Venda'].sum()
fab_qtd.sort_values(ascending= False, inplace = True)
fab_qtdidx = fab_qtd.index
fab_qtdLabel = [str(x) for x in fab_qtdidx]
fig, ax1 = plt.subplots(figsize = (10,10)) 
ax1.set_title("Produto x % do Lucro por venda".format(cidade, ano))
ax1.pie(fab_qtd, labels=fab_qtdLabel, autopct = '%1.1f%%', startangle=30)
plt.show()

"""Datas"""

datas = adv['Data Venda']
ano = [x.strftime("%Y") for x in datas]
meses = [x.strftime("%m") for x in datas]
dias = [x.strftime("%d") for x in datas]

adv['dia'], adv['mes'], adv['ano'] = dias, meses, ano

adv.ano.value_counts()

for ano in ['2008', '2009']:
  fab_qtd = adv[adv['ano'] == ano].groupby(['mes'])['Lucro Venda'].sum()
  fab_qtd.sort_values(ascending= False, inplace = True)
  fab_qtdidx = fab_qtd.index
  fab_qtdLabel = [str(x) for x in fab_qtdidx]
  fig, ax1 = plt.subplots(figsize = (10,10)) 
  explodes = [0.1 for x in range(len(fab_qtdLabel))]
  ax1.set_title("Lucro nos meses do ano {}".format(ano))
  ax1.pie(fab_qtd, labels=fab_qtdLabel, autopct = '%1.1f%%', startangle=30)
  plt.show()

for ano in ['2008', '2009']:
  fab_qtd = adv[adv['ano'] == ano].groupby(['mes'])['Quantidade'].sum()
  fab_qtd.sort_values(ascending= False, inplace = True)
  fab_qtdidx = fab_qtd.index
  fab_qtdLabel = [str(x) for x in fab_qtdidx]
  fig, ax1 = plt.subplots(figsize = (10,10)) 
  explodes = [0.1 for x in range(len(fab_qtdLabel))]
  ax1.set_title("Quantidade de vendas em {} por mês".format(ano))
  ax1.pie(fab_qtd, labels=fab_qtdLabel, explode = explodes, autopct = '%1.1f%%', startangle=30)
  plt.show()

dias_envio = adv['Dias Envio'].value_counts()

dias_envioidx = dias_envio.index
dias_envioidx = [d.days for d in dias_envioidx]

plt.figure(figsize= (10,10))
plt.bar(dias_envioidx, dias_envio, color = 'blue')
plt.ylabel("Qntd ")
plt.xlabel("Dias até Envio")
plt.title("Dias até o envio")